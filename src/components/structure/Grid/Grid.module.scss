@use '../../../styles/global/' as global;
@use 'sass:math';
@use 'sass:map';

// Grid settings
$containerHorizontalPadding: 2; //rem units
$container-width: 118; //rem units
$containerWidths: (
  "xs": 117.2,
  "sm": 117.2,
  "md": 66.60,
  "lg": 117.2,
  "xl": 117.2,
  "xxl": 117.2,
  "xxxl": 117.6
); //rem units
$gap: 2rem;
$columns: (
  "xs": 2,
  "sm": 2,
  "md": 8,
  "lg": 8,
  "xl": 10,
  "xxl": 10,
  "xxxl": 10
);

.container {
  max-width: 121.6rem;
  padding: 0 3rem;
  margin: 0 auto;
  display: grid;
  column-gap: 2rem;

  @include global.media-up(xl) {
    padding: 0 2rem;
  }

  &TwoColumns {
    grid-template-columns: 21.9rem 93.7rem;
    grid-template-rows: auto;
  }

  &SecondColumnNarrow {
    grid-template-columns: 100%;
    grid-template-rows: auto;

    @include global.media-up(xl) {
      grid-template-columns: auto 25rem;
      grid-template-rows: auto;
    }

    &>.col {
      &:nth-of-type(2) {
        @include global.media-down(xl) {
          display: none;
        }
      }

      &.pageTitleIcons {
        height: 12.9rem;
        display: none;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;

        @include global.media-up(xl) {
          display: flex;
        }
      }
    }

  }

  // width: 100%;
  // padding: 0 calc($containerHorizontalPadding / 2) * 1rem;
  // margin: 0 auto;
  // background-color: aqua;

  // @each $breakpointName,
  // $breakpointValue in variables.$breakpoints {
  //   $breakpointValuePx: $breakpointValue * 1px;
  //   $containerWidthForBreakpoint: map.get($containerWidths, $breakpointName);

  //   @media screen and (min-width:#{$breakpointValuePx}) {
  //     max-width: calc(($containerWidthForBreakpoint * 1rem) + $gap);
  //   }
  // }

  // .row {
  //   display: flex;
  //   margin-left: calc($gap / 2 * -1);
  //   margin-right: calc($gap / 2 * -1);
  //   justify-content: flex-start;
  //   align-items: flex-start;
  //   flex-wrap: wrap;

  //   .col {
  //     padding-right: calc($gap / 2);
  //     padding-left: calc($gap / 2);
  //     width: 100%;
  //   }

  //   @each $breakpointName,
  //   $breakpointValue in variables.$breakpoints {
  //     $breakpointsIndex: index(variables.$breakpoints, $breakpointName $breakpointValue);
  //     $breakpointValuePx: $breakpointValue * 1px;

  //     $colsNumberForBreakpoint: map.get($columns, $breakpointName);
  //     $colWidth: math.div(100%, $colsNumberForBreakpoint);

  //     @if $breakpointsIndex <=$colsNumberForBreakpoint {
  //       @media screen and (min-width:#{$breakpointValuePx}) {
  //         @for $i from $colsNumberForBreakpoint through 1 {
  //           .col-#{$breakpointName}-#{$i} {
  //             // $calculateWidth: 
  //             width: $colWidth * $i;
  //             $parentWidth: $colWidth * $i;

  //             @each $breakpointNameChild,
  //             $breakpointValueChild in variables.$breakpoints {
  //               $breakpointsIndexChild: index(variables.$breakpoints, $breakpointNameChild $breakpointValueChild);

  //               @if $breakpointsIndexChild <=$breakpointsIndex {
  //                 @for $childIndex from $colsNumberForBreakpoint through 1 {
  //                   .col-#{$breakpointNameChild}-#{$childIndex} {
  //                     $parentToChildRatio: math.div($colsNumberForBreakpoint, $i);
  //                     width: math.div(100%, $parentWidth) * $childIndex * $colWidth;
  //                   }
  //                 }
  //               }
  //             }
  //           }
  //         }
  //       }
  //     }
  //   }
  // }
}

.col {
  &_narrow {
    background-color: aqua;
  }

  &_wide {
    background-color: aqua;
  }
}